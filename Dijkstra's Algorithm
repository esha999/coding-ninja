import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.concurrent.PriorityBlockingQueue;


class Pair implements Comparable<Pair>{

	int s;
	int e;
	int w;
	Pair(int s, int e, int w)
	{
		this.s=s;
		this.e=e;
		this.w=w;
	}

	public int compareTo(Pair that)
	{
		return this.w-that.w;
	}
}
public class Solution {

	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int V = s.nextInt();
		int E = s.nextInt();

		/* Write Your Code Here
		 * Complete the Rest of the Program
		 * You have to take input and print the output yourself
		 */
		 int[][] arr= new int[V][V];

		 for(int i=0;i<V;i++)
		 {
			 for(int j=0;j<V;j++)
			 {
				 arr[i][j]=0;

			 }
		 }
		 for(int i=0;i<E;i++)
		 {
			 int v1=s.nextInt();
			 int v2=s.nextInt();
			 int w=s.nextInt();

			 arr[v1][v2]=w;
			 arr[v2][v1]=w;
		 }

		boolean[] visited= new boolean[V];

		PriorityQueue<Pair> pq= new PriorityQueue<>();
		pq.add(new Pair(0,0,0));
		int ans=0;
		while(!pq.isEmpty())
		{
			Pair current= pq.remove();
			int src= current.s;
			int dest=current.e;
			int weight= current.w;

			if(visited[dest]!=false)
			{
				continue;
			}

			visited[dest]=true;
		//	ans= ans+weight;
			System.out.println(dest+" "+weight);

			for(int i=0;i<V;i++)
			{
				if(arr[dest][i]!=0 && visited[i]!=true)
				{
					pq.add(new Pair(dest,i,arr[dest][i]+weight));
				}
			}
		}
	}
}
