
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.*;

public class Solution {

	public static void findMedian(int arr[])  {
        
 
  PriorityQueue<Integer> maxpq= new PriorityQueue<Integer>(Collections.reverseOrder());
	PriorityQueue<Integer> minpq= new PriorityQueue<Integer>();
	//System.out.print(arr[0]+" ");
	for(int i=0;i<arr.length;++i)
	{
		if(maxpq.size()==0 || arr[i]<=maxpq.peek())
		{
			maxpq.add(arr[i]);
		}
		else{
			minpq.add(arr[i]);
		}

		if(maxpq.size() > minpq.size()+1)
		{
			minpq.add(maxpq.poll());

		}
		else if(minpq.size() > maxpq.size())
		{
			maxpq.add(minpq.poll());
		}

		if(minpq.size()==maxpq.size())
		{
			int ans= (minpq.peek() + maxpq.peek())/2;
			System.out.print(ans+" ");
		}
		else{
			int ans= maxpq.peek();
			System.out.print(ans + " ");
		}
	}

    }


}
